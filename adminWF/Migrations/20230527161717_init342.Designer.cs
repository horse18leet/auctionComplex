// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using auctionComplex.Resources;

namespace auctionComplex.Migrations
{
    [DbContext(typeof(AuctionComplexContext))]
    [Migration("20230527161717_init342")]
    partial class init342
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("auctionComplex.Classes.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("FileSize")
                        .HasColumnName("file_size")
                        .HasColumnType("double precision");

                    b.Property<string>("FileType")
                        .HasColumnName("file_type")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Key")
                        .HasColumnName("key")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("attachments");
                });

            modelBuilder.Entity("auctionComplex.Classes.AuctionChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AuctionItemId")
                        .HasColumnName("auction_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuctionItemId");

                    b.ToTable("auction_chats");
                });

            modelBuilder.Entity("auctionComplex.Classes.AuctionItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AuctioneerId")
                        .HasColumnName("auctioneer_id")
                        .HasColumnType("integer");

                    b.Property<string>("Category")
                        .HasColumnName("category")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("InvestmentSize")
                        .HasColumnName("investment_size")
                        .HasColumnType("double precision");

                    b.Property<string>("IsValid")
                        .HasColumnName("is_valid")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnName("location")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("WinnerId")
                        .HasColumnName("winner_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuctioneerId");

                    b.HasIndex("WinnerId");

                    b.ToTable("auction_items");
                });

            modelBuilder.Entity("auctionComplex.Classes.Bid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AuctionItemId")
                        .HasColumnType("integer");

                    b.Property<int>("EntryPercentage")
                        .HasColumnName("entry_percentage")
                        .HasColumnType("integer");

                    b.Property<double>("InvestmentVolume")
                        .HasColumnName("investment_volume")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuctionItemId");

                    b.HasIndex("UserId");

                    b.ToTable("bids");
                });

            modelBuilder.Entity("auctionComplex.Classes.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AttachmentId")
                        .HasColumnType("integer");

                    b.Property<int?>("AuctionChatId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnName("text")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("AuctionChatId");

                    b.HasIndex("UserId");

                    b.ToTable("chat_messages");
                });

            modelBuilder.Entity("auctionComplex.Classes.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("numeric");

                    b.Property<int>("ReceiverWalletId")
                        .HasColumnName("receiver_wallet_id")
                        .HasColumnType("integer");

                    b.Property<int>("SenderWalletId")
                        .HasColumnName("sender_wallet_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverWalletId");

                    b.HasIndex("SenderWalletId");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("auctionComplex.Classes.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsAdmin")
                        .HasColumnName("is_admin")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SecondName")
                        .HasColumnName("second_name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("auctionComplex.Classes.UserChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AuctionChatId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuctionChatId");

                    b.HasIndex("UserId");

                    b.ToTable("user_chats");
                });

            modelBuilder.Entity("auctionComplex.Classes.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("character varying(48)")
                        .HasMaxLength(48);

                    b.Property<double>("Balance")
                        .HasColumnName("balance")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("wallets");
                });

            modelBuilder.Entity("auctionComplex.Classes.AuctionChat", b =>
                {
                    b.HasOne("auctionComplex.Classes.AuctionItem", "AuctionItem")
                        .WithMany("AuctionChats")
                        .HasForeignKey("AuctionItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("auctionComplex.Classes.AuctionItem", b =>
                {
                    b.HasOne("auctionComplex.Classes.User", "Auctioneer")
                        .WithMany("MyAuctionItems")
                        .HasForeignKey("AuctioneerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("auctionComplex.Classes.User", "Winner")
                        .WithMany("WinAuctionItems")
                        .HasForeignKey("WinnerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("auctionComplex.Classes.Bid", b =>
                {
                    b.HasOne("auctionComplex.Classes.AuctionItem", "AuctionItem")
                        .WithMany()
                        .HasForeignKey("AuctionItemId");

                    b.HasOne("auctionComplex.Classes.User", "User")
                        .WithMany("Bids")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("auctionComplex.Classes.ChatMessage", b =>
                {
                    b.HasOne("auctionComplex.Classes.Attachment", "Attachment")
                        .WithMany("chatMessages")
                        .HasForeignKey("AttachmentId");

                    b.HasOne("auctionComplex.Classes.AuctionChat", "AuctionChat")
                        .WithMany()
                        .HasForeignKey("AuctionChatId");

                    b.HasOne("auctionComplex.Classes.User", "User")
                        .WithMany("ChatMessages")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("auctionComplex.Classes.Transaction", b =>
                {
                    b.HasOne("auctionComplex.Classes.Wallet", "ReceiverWallet")
                        .WithMany()
                        .HasForeignKey("ReceiverWalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("auctionComplex.Classes.Wallet", "SenderWallet")
                        .WithMany()
                        .HasForeignKey("SenderWalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("auctionComplex.Classes.UserChat", b =>
                {
                    b.HasOne("auctionComplex.Classes.AuctionChat", "AuctionChat")
                        .WithMany("UserChats")
                        .HasForeignKey("AuctionChatId");

                    b.HasOne("auctionComplex.Classes.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("auctionComplex.Classes.Wallet", b =>
                {
                    b.HasOne("auctionComplex.Classes.User", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
